# Generated by Django 2.2.6 on 2019-10-14 14:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import enumfields.fields
import re
import repair.apps.login.models.bases
import repair.apps.statusquo.models.filters
import repair.apps.statusquo.models.indicators
import repair.apps.utils.protect_cascade


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('asmfa', '0002_auto_20191014_1444'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Aim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('priority', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AreaOfProtection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('priority', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FlowFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('filter_level', enumfields.fields.EnumIntegerField(default=3, enum=repair.apps.statusquo.models.indicators.NodeLevel)),
                ('node_ids', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('direction', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.filters.Direction)),
                ('flow_type', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.FlowType)),
                ('process_ids', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('hazardous', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.TriState)),
                ('avoidable', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.TriState)),
                ('anonymize', models.BooleanField(default=False)),
                ('aggregate_materials', models.BooleanField(default=True)),
                ('included', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FlowIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('unit', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('indicator_type', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.IndicatorType)),
                ('spatial_reference', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.SpatialType)),
                ('included', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ImpactCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('spatial_differentiation', models.BooleanField()),
                ('area_of_protection', models.ForeignKey(on_delete=repair.apps.utils.protect_cascade.PROTECT_CASCADE, to='statusquo.AreaOfProtection')),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='IndicatorCharacterisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SustainabilityField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TargetSpatialReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('text', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TargetValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('number', models.FloatField()),
                ('factor', models.FloatField()),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(default=-1)),
                ('aim', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='statusquo.Aim')),
                ('target_areas', models.ManyToManyField(to='statusquo.AreaOfProtection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='IndicatorFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_node_level', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.NodeLevel)),
                ('origin_node_ids', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('destination_node_level', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.NodeLevel)),
                ('destination_node_ids', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('process_ids', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('hazardous', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.TriState)),
                ('avoidable', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.TriState)),
                ('spatial_application', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.SpatialChoice)),
                ('flow_type', enumfields.fields.EnumIntegerField(default=1, enum=repair.apps.statusquo.models.indicators.FlowType)),
                ('materials', models.ManyToManyField(blank=True, to='asmfa.Material')),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ImpactCategoryInSustainability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_category', models.ForeignKey(on_delete=repair.apps.utils.protect_cascade.PROTECT_CASCADE, to='statusquo.ImpactCategory')),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FlowTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='statusquo.FlowIndicator')),
                ('target_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='statusquo.TargetValue')),
                ('userobjective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flow_targets', to='statusquo.UserObjective')),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view'),
            },
            bases=(repair.apps.login.models.bases.GDSEModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='flowindicator',
            name='flow_a',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flow_a', to='statusquo.IndicatorFlow'),
        ),
        migrations.AddField(
            model_name='flowindicator',
            name='flow_b',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flow_b', to='statusquo.IndicatorFlow'),
        ),
        migrations.AddField(
            model_name='flowindicator',
            name='keyflow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='asmfa.KeyflowInCasestudy'),
        ),
    ]
